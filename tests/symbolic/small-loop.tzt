code { PUSH nat 0 ;
       { 
           DUP ; 
           DIP 2 { DUP } ; 
           DIG 2 ; 
           DUG 1 ; 
           COMPARE ; 
           LT 
       } ;
       LOOP { 
           DIP 2 { IF_CONS { DROP } { UNIT ; FAILWITH } } ;
           PUSH nat 1 ;
           ADD ;
           { 
               DUP ; 
               DIP 2 { DUP } ;
               DIG 2 ; 
               DUG 1 ; 
               COMPARE ; 
               LT
           }
       } ;
       DROP 2 ;
       IF_CONS { DIP { DROP } } { UNIT ; FAILWITH } ;
       UNIT ;
       EXEC
} ; 
input { Stack_elt nat $I1 ; 
        Stack_elt (list (lambda unit int)) { { DROP ; PUSH int -3 } ; 
                                             { DROP ; PUSH int -2 } ; 
                                             { DROP ; PUSH int -1 } ;
                                             { DROP ; PUSH int  0 } ;
                                             { DROP ; PUSH int  1 } ;
                                             { DROP ; PUSH int  2 } ;
                                             { DROP ; PUSH int  3 } } 
} ;
output { Stack_elt int $I2 } ;
precondition { { PUSH nat 7 ; PUSH nat $I1 ; COMPARE ; LT } } ;
postcondition { { PUSH nat 3 ; PUSH int $I2 ; ABS ; COMPARE ; LE } } 
