input { Stack_elt nat $N ; Stack_elt bool True } ; # N B
code { INT ; DUP ;                                 # N N B
       GT ;                                        # (N>0) N B
       LOOP @I { DIP { NOT } ;                     # N -B
                 PUSH int +1 ; SWAP ; SUB ;        # (N-1) -B
                 DUP ;                             # (N-1) (N-1) -B
                 GT                                # (N-1>0) (N-1) -B
               } ;                                 # N B
       DROP                                        # B
     } ;
invariant @I { Stack_elt bool $GUARD ; Stack_elt int $CURRENT ; Stack_elt bool $EVENNESS }
             { { PUSH int 0 ; PUSH int $CURRENT ; CMPGE }                                                                                                 # CURRENT >= 0
             ; { PUSH nat 2 ; PUSH int $CURRENT ; PUSH nat $N ; INT ; SUB ; EDIV ; ASSERT_SOME ; CDR ; PUSH nat 0 ; CMPEQ ; PUSH bool $EVENNESS ; CMPEQ } # EVENNESS = (N - CURRENT) % 2 == 0
             ; { PUSH int $CURRENT ; GT ; PUSH bool $GUARD ; CMPEQ }                                                                                      # GUARD  = CURRENT > 0
             } ;
output { Stack_elt bool $EVENNESS_RESULT } ;
postcondition { { PUSH nat 2 ; PUSH nat $N ; EDIV ; ASSERT_SOME ; CDR ; PUSH nat 0 ; CMPEQ ; PUSH bool $EVENNESS_RESULT ; CMPEQ } }
