code {
  DUP ; DIP { CDR ; DUP } ;
  CAR ; DUP ;
  DIP {
      GET ;
      IF_NONE { UNIT ; FAILWITH } { } ; # ASSERT_SOME ;
      PUSH int 1 ;
      ADD ;
      SOME
  } ;
  UPDATE ;
  NIL operation ;
  PAIR
} ;

# storage (map int int) ;
# parameter int ;
input { Stack_elt (pair int (map int int)) $I } ;

precondition { { PUSH (pair int (map int int)) $I                             # (S, M)
               ; UNPAIR                                                       # S M
               ; MEM                                                          # (S \in M)
               }
             } ;

output { Stack_elt (pair (list operation) (map int int)) $O } ;
postcondition { { PUSH (pair int (map int int)) $I                            # (S,M)
                ; CDR                                                         # M
                ; PUSH int $K                                                 # K M
                ; GET                                                         # M[K]?
                ; IF_NONE { PUSH bool True } {                                # M[K]
                    PUSH (pair (list operation) (map int int)) $O             # (O,M') M[K]
                  ; CDR                                                       # M' M[K]
                  ; PUSH int $K                                               # K M' M[K]
                  ; GET                                                       # M'[K]? M[K]
                  ; IF_NONE { UNIT ; FAILWITH } { }                           # M'[K]  M[K]
                  ; SWAP                                                      # M'[K]  M[K]

                  ; PUSH int $K                                               # K       M[K]  M'[K]
                  ; PUSH (pair int (map int int)) $I                          # (M,S) K    M[K]  M'[K]
                  ; CAR                                                       # S K      M[K]  M'[K]
                  ; COMPARE ; EQ                                              # S=K      M[K]  M'[K]
                  ; IF { TRACE("1") ; PUSH nat 1; ADD ; COMPARE ; EQ }        # M[K]+1=M'[K]
                       { TRACE("2") ;                   COMPARE ; EQ }        # M[K] = M'[K]
                  }
                }
             }
