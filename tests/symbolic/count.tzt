code { DUP ; 
       DIG 2 ; 
       DUP ; 
       DUG 3 ; 
       SWAP ; 
       COMPARE ; 
       LT ; 
       LOOP @I { 
           PUSH nat 1 ; 
           ADD ; 
           DUP ; 
           DIG 2 ; 
           DUP ; 
           DUG 3 ; 
           SWAP ; 
           COMPARE ; 
           LT 
       } ;
       DIP { DROP } 
} ;
input { Stack_elt nat $I1 ; Stack_elt nat $I2 } ;
output { Stack_elt nat $I3 } ;
invariants { @I { { COMPARE ; LE } } } ;
precondition { { PUSH nat $I2 ; PUSH nat $I1 ; COMPARE ; LT } } ;
postcondition { { PUSH nat $I2 ; PUSH nat $I3 ; COMPARE ; EQ } } 
