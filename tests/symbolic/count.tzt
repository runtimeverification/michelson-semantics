parameter unit ;
input { Stack_elt nat $N } ;                        #                     N
code { # DUP ;                                      #                   N N
       # PUSH nat 0 ;                               #                 0 N N
       # SWAP ;                                     #                 N 0 N
       # GT ;                                       #             (N>0) 0 N

       PUSH nat 0 ;                                 #                   0 N
       DUP ;                                        #                 0 0 N
       DIG 2 ;                                      #                 N 0 0
       DUP ;                                        #               N N 0 0
       DUG 3 ;                                      #               N 0 0 N
       SWAP ;                                       #               0 N 0 N
       COMPARE ;                                    #             (0-N) 0 N
       LT ;                                         #            (-N)<0 0 N

       LOOP @I {                                    #                   C N
           PUSH nat 1 ;                             #                 1 C N
           ADD ;                                    #               (C+1) N
           DUP ;                                    #         (C+1) (C+1) N
           DIG 2 ;                                  #         N (C+1) (C+1)
           DUP ;                                    #       N N (C+1) (C+1)
           DUG 3 ;                                  #       N (C+1) (C+1) N
           SWAP ;                                   #       (C+1) N (C+1) N
           COMPARE ;                                #       >>>>>>> (C+1) N
           LT                                       #     (C+1)<N   (C+1) N
       } ;
       DIP { DROP }                                 #                     N
} ;

precondition       { } ;
invariant       @I { Stack_elt bool $GUARD ; Stack_elt nat $C ; Stack_elt nat $N  }
                   { { PUSH nat $N ; PUSH nat $C ; COMPARE ; LE }
                   ; { PUSH nat $N ; PUSH nat $C ; COMPARE ; LT ; PUSH bool $GUARD ; COMPARE ; EQ }
                   } ;
output { Stack_elt nat $C } ;
postcondition { { PUSH nat $N ; PUSH nat $C ; COMPARE ; EQ } }
