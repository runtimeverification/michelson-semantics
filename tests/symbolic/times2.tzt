input { Stack_elt nat $N0 } ;                       #                     N
code { INT ;
       DUP ;                                        #                   N N
       PUSH nat 0 ;                                 #                 0 N N
       SWAP ;                                       #                 N 0 N
       GT ;                                         #             (N>0) 0 N
       LOOP @I {                                    #                   C N
           PUSH nat 2 ;                             #                 2 C N
           ADD ;                                    #               (C+2) N
           DIP {
             PUSH nat 1 ;                           #             (C+2) | 1 N
             SWAP ;                                 #             (C+2) | N 1
             SUB                                    #           (C+2)   | (N-1)
           } ;
           DUP 2 ;                                  #     (N-1) (C+2) (N-1)
           GT                                       #   (N-1)>0 (C+2) (N-1)
       } ;
       DIP { DROP }                                 #                     C
} ;
invariant @I { Stack_elt bool $GUARD ; Stack_elt nat $C ; Stack_elt int $N }
             { { PUSH int $N ; PUSH nat $N0 ; INT ; CMPGE ; PUSH int $N ; GE ; AND }
             ; { PUSH int $N ; PUSH nat $N0 ; SUB ; PUSH nat 2 ; MUL ; PUSH nat $C ; INT ; CMPEQ }
             ; { PUSH int $N ; GT ; PUSH bool $GUARD ; CMPEQ }
             } ;
output { Stack_elt nat $C } ;
postcondition { { PUSH nat $N0 ; PUSH nat 2 ; MUL ; PUSH nat $C ; CMPEQ } }
