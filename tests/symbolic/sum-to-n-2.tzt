input { Stack_elt int $N0 ; Stack_elt int $S0 } ;
precondition { { PUSH int $N0 ; GE } } ;

code {
       DUP ;                     # N0 N0 S0
       GT ;                      # (N0 > 0) N0 S0
       LOOP @I {                 # N S
                 DUP ;           # N N S
                 DIP {           # N | N S
                       ADD       # N | (N + S)
                     } ;         # N (N +S)
                 PUSH nat 1 ;    # 1 N (N + S)
                 SWAP ;          # N 1 (N + S)
                 SUB ;           # (N - 1) (N + S)
                 DUP ;           # (N - 1) (N - 1) (N + S)
                 GT              # (N - 1 > 0) (N - 1) (N + S)
               }
     } ; 

invariant @I
    { Stack_elt bool $C ; Stack_elt int $N ; Stack_elt int $S }
    { { PUSH bool $C ; PUSH int $N ; GT ; CMPEQ } ;
      { PUSH int $N ; GE } ;
      {
        PUSH int $S0 ;           # S0
        PUSH int $S ;            # S S0
        SUB ;                    # (S - S0)
        PUSH nat 2 ;             # 2 (S - S0)
        MUL ;                    # (2 * (S - S0))
        PUSH nat 1 ;             # 1 (2 * (S - S0))
        PUSH int $N ;            # N 1 (2 * (S - S0))
        PUSH int $N0 ;           # N0 N1 1 (2 * (S - S0))
        ADD ;                    # (N0 + N) 1 (2 * (S - S0))
        ADD ;                    # (N0 + N + 1) (2 * (S - S0))
        PUSH int $N ;            # N (N0 + N + 1) (2 * (S - S0))
        PUSH int $N0 ;           # N0 N (N0 + N + 1) (2 * (S - S0))
        SUB ;                    # (N0 - N) (N0 + N + 1) (2 * (S - S0))
        MUL ;                    # ((N0 - N) * (N0 + N + 1)) (2 * (S - S0))
        CMPEQ                    # ((N0 - N) * (N0 + N + 1) = 2 * (S - S0))
      } } ;

output { Stack_elt int $N ; Stack_elt int $S } ;
postcondition { { PUSH int $N ; EQ } ;
                {
                  PUSH int $S0 ; # S0
                  PUSH int $S ;  # S S0
                  SUB ;          # (S - S0)
                  PUSH nat 2 ;   # 2 (S - S0)
                  MUL ;          # (2 * (S - S0))
                  PUSH nat 1 ;   # 1 (2 * (S - S0))
                  PUSH int $N0 ; # N0 1 (2 * (S - S0))
                  ADD ;          # (N0 + 1) (2 * (S - S0))
                  PUSH int $N0 ; # N0 (N0 + 1) (2 * (S - S0))
                  MUL ;          # (N0 * (N0 + 1)) (2 * (S - S0))
                  CMPEQ          # (N0 * (N0 + 1) = 2 * (S - S0))
                } }

