#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

kmich_dir="${KMICH_DIR:-.}"
build_dir="$kmich_dir/.build"
defn_dir="${KMICH_DEFN_DIR:-$build_dir/defn}"
lib_dir="$build_dir/local/lib"
k_release_dir="${K_RELEASE:-$kmich_dir/ext/k/k-distribution/target/release/k}"
if [[ ! -f "${k_release_dir}/bin/kompile" ]]; then
    if which kompile &> /dev/null; then
        k_release_dir="$(dirname $(which kompile))/.."
    else
        fatal "Cannot find K Installation!"
    fi
fi

export PATH="$k_release_dir/bin:$PATH"
export LD_LIBRARY_PATH="$k_release_dir/lib/native/linux64:$lib_dir:${LD_LIBRARY_PATH:-}"

# Runners
# -------

# User Commands

run_krun() {
    export K_OPTS=-Xss500m
    krun --directory "$backend_dir" "$run_file" "$@"
}

run_kast() {
    local output_mode

    output_mode="$1" ; shift
    kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@"
}

run_prove() {
    local def_module

    def_module="$1" ; shift
    export K_OPTS=-Xmx8G
    kprove --directory "$backend_dir" "$run_file" --def-module "$def_module" "$@"
}

run_interpret() {
    local in_kore out_kore

    in_kore=$(mktemp)
    out_kore=$(mktemp)
    trap "rm -rf $in_kore $out_kore" INT TERM EXIT

    cat "$run_file" | $kompiled_dir/parser_PGM > $in_kore
    llvm-krun --directory "$kompiled_dir" -c PGM $in_kore Pgm korefile --pretty-print
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 run       [--backend (llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare)] <pgm>  <K arg>*
               $0 kast      [--backend (llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare)] <pgm>  <output format> <K arg>*
               $0 prove     [--backend (prove|symbolic)]                                                               <spec> <def_module>    <K arg>*
               $0 interpret [--backend (llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare)] <pgm>

               $0 [help|--help|version|--version]

           $0 run       : Run a single Michelson program.
           $0 kast      : Parse a Michelson program and output it in a supported format.
           $0 prove     : Run a Michelson K proof.
           $0 interpret : Run a single Michelson program using the fast bison parser.

           $0 help    : Display this help message.
           $0 version : Display the versions of KMichelson, K, Kore, and Z3 in use.

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <K arg> is an argument you want to pass to K.
                 <output format> is the format for Kast to output the term in.
                 <def_module> is the module to take as axioms when doing verification.
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif "KMich Version"
    git rev-parse --short HEAD
    notif "K Version"
    kompile --version
    notif "Kore Version"
    kore-exec --version
    notif "Z3 Version"
    z3 --version
    exit 0
fi

backend="llvm"
debug=false
[[ ! "$run_command" == 'prove' ]] || backend='prove'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --backend)    args+=("$arg" "$2") ; backend="$2"      ; shift 2 ;;
        --backend-dir)                      backend_dir="$2"  ; shift 2 ;;
        --debug)      args+=("$arg")      ; debug=true        ; shift   ;;
        *)            break                                             ;;
    esac
done
backend_dir="${backend_dir:-$defn_dir/$backend}"
kompiled_dir=$(find $backend_dir -name '*-kompiled')
[[ -d "$kompiled_dir" ]] || fatal "Could not find single *-kompiled directory in $backend_dir"

# get the run file
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

case "$run_command-$backend" in

    # Running
    run-@(llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare)       ) run_krun  "$@" ;;
    kast-@(llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare)      ) run_kast  "$@" ;;
    prove-@(prove|symbolic)                                                                   ) run_prove "$@" ;;
    interpret-@(llvm|prove|symbolic|contract-expander|extractor|input-creator|output-compare) ) run_interpret  ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
