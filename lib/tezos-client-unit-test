#!/usr/bin/env bash

set -euo pipefail

# Variables
# =========

repo_dir="$(cd $(dirname $0)/..; pwd -P)"
lib_dir=$repo_dir/lib
tezos_dir="$repo_dir/ext/tezos"

export TEMP_DIR=$(mktemp --directory --tmpdir tmp-tezos-unit-test.XXXXXX)
tezos_base_dir="$TEMP_DIR/mockup-base/"

PATH="$tezos_dir:$PATH"

# Helpers
# =======

interpret() {
    local backend=$1; shift
    local input=$1; shift

    "$repo_dir/kmich" interpret --backend $backend $input "$@"
}

interpret_quiet() {
    # --output-file only controls where the final configuration is output.
    # --output-file /dev/null supresses that, without supressing output
    # from `stream="stdout"` cells.
    interpret "$@" --output-file /dev/null
}

start_tezos()
{
    local tezos_protocol=ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK
    mkdir "$tezos_base_dir"
    tezos-client --protocol "$tezos_protocol" --base-dir "$tezos_base_dir" create mockup
    export TEZOS_CLIENT="tezos-client --mode mockup --base-dir $tezos_base_dir"
}

stop_tezos() {
    rm -r "$tezos_base_dir"
}

# To be refactored
# =================

extract() {
    python3 "$lib_dir/extract-group.py" "$test_extracted" "$@"
}

fix_address() {
    [[ -f "$test"           ]] || fatal "File doesn't exist: $test_file"
    [[ -f "$test_extracted" ]] || fatal "File doesn't exist: $test_file_extracted"
    [[ -f "$test_input"     ]] || fatal "File doesn't exist: $test_file_input"

    # We export variables shared with run-tezos

    KNOWN_FAKES="$lib_dir/addresses.txt"
    FOUND_ADDRESSES="$TEMP_DIR/addresses"
    REAL_ADDRESSES_UNSORTED="$TEMP_DIR/contracts_unsorted"
    REAL_ADDRESSES="$TEMP_DIR/contracts"
    FAKE_ADDRESSES="$TEMP_DIR/fake_addresses"
    FAKE_ADDRESS_SUBS="$TEMP_DIR/fake_address_subs"
    ORIGINATION_OUTPUTS="$TEMP_DIR/originations"
    export ORIGINATION_SUBS="$TEMP_DIR/origination_subs"
    export ALL_SUBS="$TEMP_DIR/subs"

    if ! grep -o '@Address([^)"]*)' "$test" | sort | uniq > "$FOUND_ADDRESSES"; then
        touch "$FOUND_ADDRESSES"
    fi

    extract other_contracts true | tr -d '{}' | tr ';' '\n' | sed -E 's/^\s*//;s/\s*$//;s/Elt\s*"([^"]*)"\s*(.*)/\1#\2/;/^\s*$/d' > "$REAL_ADDRESSES_UNSORTED"

    export FAKE_SENDER=$(extract sender true)
    if [ ! -z $FAKE_SENDER ] && ! ( grep "$FAKE_SENDER" "$REAL_ADDRESSES_UNSORTED" ); then
        echo "$FAKE_SENDER#unit" >> "$REAL_ADDRESSES_UNSORTED"
    fi

    export FAKE_SOURCE=$(extract source true)
    if [ ! -z $FAKE_SOURCE ] && ! ( grep "$FAKE_SOURCE" "$REAL_ADDRESSES_UNSORTED" ); then
        echo "$FAKE_SOURCE#unit" >> "$REAL_ADDRESSES_UNSORTED"
    fi

    FAKE_SELF=$(extract self true)
    REAL_SELF="$($TEZOS_CLIENT run script "parameter unit ; storage (option address) ; code { DROP ; SELF ; ADDRESS ; CONTRACT unit ; IF_SOME { ADDRESS ; SOME ; NIL operation ; PAIR } {FAIL} }" on storage None and input Unit 2>&1 | grep "Some" | sed -E 's/\s*\(Some "([^"]*)"\)\s*/\1/')"

    sort "$REAL_ADDRESSES_UNSORTED" | uniq > "$REAL_ADDRESSES"

    diff --new-line-format="" --unchanged-line-format="" "$FOUND_ADDRESSES" <(cut -d'#' -f 1 "$REAL_ADDRESSES") > "$FAKE_ADDRESSES" || true

    if [ ! -z "$FAKE_SELF" ] ; then
        sed -i "/$FAKE_SELF/d" "$FAKE_ADDRESSES" ;
    fi

    paste -d'/' "$FAKE_ADDRESSES" <(head -n "$(wc -l "$FAKE_ADDRESSES" | grep -o "^[0-9]*")" $KNOWN_FAKES  ) | sed -E 's|(.*)|s/\1/|' > "$FAKE_ADDRESS_SUBS"

    if [ ! -z $FAKE_SELF ] ; then
        echo "s|$FAKE_SELF|$REAL_SELF|" >> "$FAKE_ADDRESS_SUBS"
    fi

    python3 $lib_dir/originate.py $REAL_ADDRESSES > $ORIGINATION_OUTPUTS \
        || fatal "Failed to originate contracts: $test"
    paste -d '/' <(cut -d'#' -f1 "$REAL_ADDRESSES") <(grep -Po '(?<=New contract )[a-zA-Z0-9_]*' "$ORIGINATION_OUTPUTS") | sed -E 's|(.*)|s/\1/|;s|s///||' > "$ORIGINATION_SUBS"

    cat "$FAKE_ADDRESS_SUBS" "$ORIGINATION_SUBS" > "$ALL_SUBS"

    sed -f "$ALL_SUBS" "$test" > "$test_address"
}

# Main
# ====

test=$1; shift
test_input="$test.input"
test_address="$test.address"
test_expanded="$test.expanded"
test_extracted="$test.extracted"
test_output="$test.output"

interpret_quiet input-creator $test > $test_input
interpret_quiet extractor $test > $test_extracted

start_tezos
fix_address "$test"
interpret_quiet contract-expander $test_address > $test_expanded
"$lib_dir/run-tezos.sh" "$test"
stop_tezos
interpret output-compare $test_output
rm -r "$TEMP_DIR"
