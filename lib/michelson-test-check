#!/usr/bin/env python3

# Usage: ./kmich run ... --search-final --output json | $0 <path-to-definition>
#
# Reads kmichelson json output for unit-tests and checks that all branches have succeeded.
# Exits 127 if there is a stuck term. Otherwise, exits with the number of failing branches

import json
import os
import pyk
import sys

def findSubtermsByLabel(label, term):
    if not (pyk.isKSequence(term) or pyk.isKApply(term)): return []
    if pyk.isKApply(term):
        if term['label'] == label: return [term]
        ret = []
        for subterm in term['args']:
            ret += findSubtermsByLabel(label, subterm)
        return ret
    return []

def findImmediateSubtermsByLabel(labels,term):
    if not pyk.isKApply(term): return dict()
    ret = dict()
    for label in labels:
        for subterm in term['args']:
            if not pyk.isKApply(subterm): continue
            if subterm['label'] == label:
                ret[label] = subterm
                break
        if not label in ret.keys(): raise ValueError("Subterm " + label + " not found")
    return ret

def parseKastTerm(jsonString):
    return json.loads(jsonString)['term']

def getBranches(term):
    """ If the term is a disjunction, return all children, otherwise return a list containing the term itself """
    if term['label'] == '#Or':
      return getBranches(term['args'][0]) + getBranches(term['args'][1])
    return [term]

def splitPathConditions(term):
    """ Returns a pair,
        * whose first element is the configuration if the term is a constrained configuration
                                                      otherwise, the first element in None
        * whose second element is a list of predicate side condition
    """
    def combine(l, r):
        lconfig, lconstraints = l
        rconfig, rconstraints = r
        assert(lconfig == None or rconfig == None)
        return (lconfig if lconfig else rconfig, lconstraints + rconstraints)

    if term['label'] == '#And':
        return combine(splitPathConditions(term['args'][0]), splitPathConditions(term['args'][1]))
    if findSubtermsByLabel('<michelsonTop>',term) != []:
        assert(term['label'] == '#Equals')
        return (findSubtermsByLabel('<michelsonTop>',term)[0], [])
    # Path condition only (hopefully!)
    return (None, [term])

def findFailingBranches(term):
    success_count = 0
    failures = []
    stucks = []

    for branch in getBranches(term):
        topCell, constraints = splitPathConditions(branch)
        cells = findImmediateSubtermsByLabel(['<k>','<stack>','<symbols>','<cutpoints>','<trace>'], topCell)

        assert(cells['<k>']['arity'] == 1)
        kcell = cells['<k>']['args'][0]
        assert(pyk.isKSequence(kcell))

        if   kcell['items'] == []:                          success_count += 1
        elif kcell['items'][0]['label'] != '#AssertFailed': stucks += [(constraints,cells)]
        else:                                               failures += [(constraints,cells)]
    return success_count, failures, stucks

def printStates(statetype,states):
    if len(states) == 0: return
    print(statetype + "s:")
    for i,(constraints,state) in enumerate(states):
        statenum = statetype + ": " + str(i)
        print(">" * 5, statenum, ">" * abs(73 - len(statenum)))
        for constraint in constraints: print("  " + pyk.prettyPrintKast(constraint, symbolTable))
        for name, term in state.items():
            print(pyk.prettyPrintKast(term, symbolTable))
    print()
    sys.stdout.flush()

assert(len(sys.argv) == 2)
pathToDefinition = sys.argv[1]
definition = pyk.readKastTerm(os.path.join(pathToDefinition, 'compiled.json'))
symbolTable = pyk.buildSymbolTable(definition)

def print_in_keys(map, key): return "%s in_keys(%s)" %(map, key)
symbolTable['_in_keys(_)_MAP_Bool_KItem_Map'] = print_in_keys

outputTerm = parseKastTerm(sys.stdin.read())
success_count, failures, stucks = findFailingBranches(outputTerm)
printStates("Stuck",stucks)
printStates("Failure",failures)

print("%d branch(es) succeeded; %d branch(es) failed; %d branch(es) stuck." % (success_count, len(failures), len(stucks)))
if stucks:   sys.exit(2)
if failures: sys.exit(1)

